#include <math.h>__global__void kernel1(const float *input, const float *input2, float *output, int dataSize){	int blockNum = blockIdx.z*(gridDim.x*gridDim.y) + blockIdx.y*gridDim.x + blockIdx.x;	int threadNum = threadIdx.z*(blockDim.x*blockDim.y) + threadIdx.y*(blockDim.x) + threadIdx.x;	int i = blockNum*(blockDim.x*blockDim.y*blockDim.z) + threadNum;    if (i < dataSize)    {        output[i] = sin(input[i]) + cos(input2[i]);    }}__global__void kernel2(const float *input, float *output, int dataSize){	int blockNum = blockIdx.z*(gridDim.x*gridDim.y) + blockIdx.y*gridDim.x + blockIdx.x;	int threadNum = threadIdx.z*(blockDim.x*blockDim.y) + threadIdx.y*(blockDim.x) + threadIdx.x;	int i = blockNum*(blockDim.x*blockDim.y*blockDim.z) + threadNum;    if (i < dataSize)    {        output[i] = log(input[i]);    }}__global__void kernel3(const float *input, float *output, int dataSize){	int blockNum = blockIdx.z*(gridDim.x*gridDim.y) + blockIdx.y*gridDim.x + blockIdx.x;	int threadNum = threadIdx.z*(blockDim.x*blockDim.y) + threadIdx.y*(blockDim.x) + threadIdx.x;	int i = blockNum*(blockDim.x*blockDim.y*blockDim.z) + threadNum;    if (i < dataSize)    {        output[i] = sqrt(input[i]);    }}